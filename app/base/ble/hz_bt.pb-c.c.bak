/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: hzmessage.proto */

/* Do not generate deprecated warnings for self */
#ifndef PROTOBUF_C__NO_DEPRECATED
#define PROTOBUF_C__NO_DEPRECATED
#endif

#include "hzmessage.pb-c.h"
void   authentication_info__init
                     (AuthenticationInfo         *message)
{
  static const AuthenticationInfo init_value = AUTHENTICATION_INFO__INIT;
  *message = init_value;
}
size_t authentication_info__get_packed_size
                     (const AuthenticationInfo *message)
{
  assert(message->base.descriptor == &authentication_info__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t authentication_info__pack
                     (const AuthenticationInfo *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &authentication_info__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t authentication_info__pack_to_buffer
                     (const AuthenticationInfo *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &authentication_info__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
AuthenticationInfo *
       authentication_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (AuthenticationInfo *)
     protobuf_c_message_unpack (&authentication_info__descriptor,
                                allocator, len, data);
}
void   authentication_info__free_unpacked
                     (AuthenticationInfo *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &authentication_info__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   authentication_response__init
                     (AuthenticationResponse         *message)
{
  static const AuthenticationResponse init_value = AUTHENTICATION_RESPONSE__INIT;
  *message = init_value;
}
size_t authentication_response__get_packed_size
                     (const AuthenticationResponse *message)
{
  assert(message->base.descriptor == &authentication_response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t authentication_response__pack
                     (const AuthenticationResponse *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &authentication_response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t authentication_response__pack_to_buffer
                     (const AuthenticationResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &authentication_response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
AuthenticationResponse *
       authentication_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (AuthenticationResponse *)
     protobuf_c_message_unpack (&authentication_response__descriptor,
                                allocator, len, data);
}
void   authentication_response__free_unpacked
                     (AuthenticationResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &authentication_response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   time_stamp__init
                     (TimeStamp         *message)
{
  static const TimeStamp init_value = TIME_STAMP__INIT;
  *message = init_value;
}
size_t time_stamp__get_packed_size
                     (const TimeStamp *message)
{
  assert(message->base.descriptor == &time_stamp__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t time_stamp__pack
                     (const TimeStamp *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &time_stamp__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t time_stamp__pack_to_buffer
                     (const TimeStamp *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &time_stamp__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
TimeStamp *
       time_stamp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (TimeStamp *)
     protobuf_c_message_unpack (&time_stamp__descriptor,
                                allocator, len, data);
}
void   time_stamp__free_unpacked
                     (TimeStamp *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &time_stamp__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   user_info__init
                     (UserInfo         *message)
{
  static const UserInfo init_value = USER_INFO__INIT;
  *message = init_value;
}
size_t user_info__get_packed_size
                     (const UserInfo *message)
{
  assert(message->base.descriptor == &user_info__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t user_info__pack
                     (const UserInfo *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &user_info__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t user_info__pack_to_buffer
                     (const UserInfo *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &user_info__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
UserInfo *
       user_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (UserInfo *)
     protobuf_c_message_unpack (&user_info__descriptor,
                                allocator, len, data);
}
void   user_info__free_unpacked
                     (UserInfo *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &user_info__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   ack__init
                     (ACK         *message)
{
  static const ACK init_value = ACK__INIT;
  *message = init_value;
}
size_t ack__get_packed_size
                     (const ACK *message)
{
  assert(message->base.descriptor == &ack__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t ack__pack
                     (const ACK *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &ack__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t ack__pack_to_buffer
                     (const ACK *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &ack__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
ACK *
       ack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (ACK *)
     protobuf_c_message_unpack (&ack__descriptor,
                                allocator, len, data);
}
void   ack__free_unpacked
                     (ACK *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &ack__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   vehicle_door__init
                     (VehicleDoor         *message)
{
  static const VehicleDoor init_value = VEHICLE_DOOR__INIT;
  *message = init_value;
}
size_t vehicle_door__get_packed_size
                     (const VehicleDoor *message)
{
  assert(message->base.descriptor == &vehicle_door__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t vehicle_door__pack
                     (const VehicleDoor *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &vehicle_door__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t vehicle_door__pack_to_buffer
                     (const VehicleDoor *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &vehicle_door__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
VehicleDoor *
       vehicle_door__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (VehicleDoor *)
     protobuf_c_message_unpack (&vehicle_door__descriptor,
                                allocator, len, data);
}
void   vehicle_door__free_unpacked
                     (VehicleDoor *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &vehicle_door__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   panoramic_sunroof__init
                     (PanoramicSunroof         *message)
{
  static const PanoramicSunroof init_value = PANORAMIC_SUNROOF__INIT;
  *message = init_value;
}
size_t panoramic_sunroof__get_packed_size
                     (const PanoramicSunroof *message)
{
  assert(message->base.descriptor == &panoramic_sunroof__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t panoramic_sunroof__pack
                     (const PanoramicSunroof *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &panoramic_sunroof__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t panoramic_sunroof__pack_to_buffer
                     (const PanoramicSunroof *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &panoramic_sunroof__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
PanoramicSunroof *
       panoramic_sunroof__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (PanoramicSunroof *)
     protobuf_c_message_unpack (&panoramic_sunroof__descriptor,
                                allocator, len, data);
}
void   panoramic_sunroof__free_unpacked
                     (PanoramicSunroof *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &panoramic_sunroof__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   electric_door__init
                     (ElectricDoor         *message)
{
  static const ElectricDoor init_value = ELECTRIC_DOOR__INIT;
  *message = init_value;
}
size_t electric_door__get_packed_size
                     (const ElectricDoor *message)
{
  assert(message->base.descriptor == &electric_door__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t electric_door__pack
                     (const ElectricDoor *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &electric_door__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t electric_door__pack_to_buffer
                     (const ElectricDoor *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &electric_door__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
ElectricDoor *
       electric_door__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (ElectricDoor *)
     protobuf_c_message_unpack (&electric_door__descriptor,
                                allocator, len, data);
}
void   electric_door__free_unpacked
                     (ElectricDoor *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &electric_door__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   remote_fine_car__init
                     (RemoteFineCar         *message)
{
  static const RemoteFineCar init_value = REMOTE_FINE_CAR__INIT;
  *message = init_value;
}
size_t remote_fine_car__get_packed_size
                     (const RemoteFineCar *message)
{
  assert(message->base.descriptor == &remote_fine_car__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t remote_fine_car__pack
                     (const RemoteFineCar *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &remote_fine_car__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t remote_fine_car__pack_to_buffer
                     (const RemoteFineCar *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &remote_fine_car__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
RemoteFineCar *
       remote_fine_car__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (RemoteFineCar *)
     protobuf_c_message_unpack (&remote_fine_car__descriptor,
                                allocator, len, data);
}
void   remote_fine_car__free_unpacked
                     (RemoteFineCar *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &remote_fine_car__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   charge__init
                     (Charge         *message)
{
  static const Charge init_value = CHARGE__INIT;
  *message = init_value;
}
size_t charge__get_packed_size
                     (const Charge *message)
{
  assert(message->base.descriptor == &charge__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t charge__pack
                     (const Charge *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &charge__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t charge__pack_to_buffer
                     (const Charge *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &charge__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Charge *
       charge__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Charge *)
     protobuf_c_message_unpack (&charge__descriptor,
                                allocator, len, data);
}
void   charge__free_unpacked
                     (Charge *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &charge__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   power_control__init
                     (PowerControl         *message)
{
  static const PowerControl init_value = POWER_CONTROL__INIT;
  *message = init_value;
}
size_t power_control__get_packed_size
                     (const PowerControl *message)
{
  assert(message->base.descriptor == &power_control__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t power_control__pack
                     (const PowerControl *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &power_control__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t power_control__pack_to_buffer
                     (const PowerControl *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &power_control__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
PowerControl *
       power_control__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (PowerControl *)
     protobuf_c_message_unpack (&power_control__descriptor,
                                allocator, len, data);
}
void   power_control__free_unpacked
                     (PowerControl *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &power_control__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   application_header__init
                     (ApplicationHeader         *message)
{
  static const ApplicationHeader init_value = APPLICATION_HEADER__INIT;
  *message = init_value;
}
size_t application_header__get_packed_size
                     (const ApplicationHeader *message)
{
  assert(message->base.descriptor == &application_header__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t application_header__pack
                     (const ApplicationHeader *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &application_header__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t application_header__pack_to_buffer
                     (const ApplicationHeader *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &application_header__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
ApplicationHeader *
       application_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (ApplicationHeader *)
     protobuf_c_message_unpack (&application_header__descriptor,
                                allocator, len, data);
}
void   application_header__free_unpacked
                     (ApplicationHeader *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &application_header__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   protocol_header__init
                     (ProtocolHeader         *message)
{
  static const ProtocolHeader init_value = PROTOCOL_HEADER__INIT;
  *message = init_value;
}
size_t protocol_header__get_packed_size
                     (const ProtocolHeader *message)
{
  assert(message->base.descriptor == &protocol_header__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t protocol_header__pack
                     (const ProtocolHeader *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &protocol_header__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t protocol_header__pack_to_buffer
                     (const ProtocolHeader *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &protocol_header__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
ProtocolHeader *
       protocol_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (ProtocolHeader *)
     protobuf_c_message_unpack (&protocol_header__descriptor,
                                allocator, len, data);
}
void   protocol_header__free_unpacked
                     (ProtocolHeader *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &protocol_header__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
static const ProtobufCFieldDescriptor authentication_info__field_descriptors[2] =
{
  {
    "authentication_type",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(AuthenticationInfo, authentication_type),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "authentication_data",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_BYTES,
    0,   /* quantifier_offset */
    offsetof(AuthenticationInfo, authentication_data),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned authentication_info__field_indices_by_name[] = {
  1,   /* field[1] = authentication_data */
  0,   /* field[0] = authentication_type */
};
static const ProtobufCIntRange authentication_info__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor authentication_info__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "AuthenticationInfo",
  "AuthenticationInfo",
  "AuthenticationInfo",
  "",
  sizeof(AuthenticationInfo),
  2,
  authentication_info__field_descriptors,
  authentication_info__field_indices_by_name,
  1,  authentication_info__number_ranges,
  (ProtobufCMessageInit) authentication_info__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor authentication_response__field_descriptors[3] =
{
  {
    "auth_result",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_BOOL,
    0,   /* quantifier_offset */
    offsetof(AuthenticationResponse, auth_result),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "failure_reasons",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(AuthenticationResponse, failure_reasons),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ver_data",
    3,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_BYTES,
    0,   /* quantifier_offset */
    offsetof(AuthenticationResponse, ver_data),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned authentication_response__field_indices_by_name[] = {
  0,   /* field[0] = auth_result */
  1,   /* field[1] = failure_reasons */
  2,   /* field[2] = ver_data */
};
static const ProtobufCIntRange authentication_response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor authentication_response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "AuthenticationResponse",
  "AuthenticationResponse",
  "AuthenticationResponse",
  "",
  sizeof(AuthenticationResponse),
  3,
  authentication_response__field_descriptors,
  authentication_response__field_indices_by_name,
  1,  authentication_response__number_ranges,
  (ProtobufCMessageInit) authentication_response__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor time_stamp__field_descriptors[6] =
{
  {
    "year",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(TimeStamp, year),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "month",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(TimeStamp, month),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "day",
    3,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(TimeStamp, day),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "hour",
    4,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(TimeStamp, hour),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "minute",
    5,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(TimeStamp, minute),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "second",
    6,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(TimeStamp, second),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned time_stamp__field_indices_by_name[] = {
  2,   /* field[2] = day */
  3,   /* field[3] = hour */
  4,   /* field[4] = minute */
  1,   /* field[1] = month */
  5,   /* field[5] = second */
  0,   /* field[0] = year */
};
static const ProtobufCIntRange time_stamp__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 6 }
};
const ProtobufCMessageDescriptor time_stamp__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "TimeStamp",
  "TimeStamp",
  "TimeStamp",
  "",
  sizeof(TimeStamp),
  6,
  time_stamp__field_descriptors,
  time_stamp__field_indices_by_name,
  1,  time_stamp__number_ranges,
  (ProtobufCMessageInit) time_stamp__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor user_info__field_descriptors[3] =
{
  {
    "bt_addr",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(UserInfo, bt_addr),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "bt_name",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(UserInfo, bt_name),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "imsi",
    3,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(UserInfo, imsi),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned user_info__field_indices_by_name[] = {
  0,   /* field[0] = bt_addr */
  1,   /* field[1] = bt_name */
  2,   /* field[2] = imsi */
};
static const ProtobufCIntRange user_info__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor user_info__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "UserInfo",
  "UserInfo",
  "UserInfo",
  "",
  sizeof(UserInfo),
  3,
  user_info__field_descriptors,
  user_info__field_indices_by_name,
  1,  user_info__number_ranges,
  (ProtobufCMessageInit) user_info__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor ack__field_descriptors[2] =
{
  {
    "msg_type",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(ACK, msg_type),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ack_state",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(ACK, ack_state),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned ack__field_indices_by_name[] = {
  1,   /* field[1] = ack_state */
  0,   /* field[0] = msg_type */
};
static const ProtobufCIntRange ack__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor ack__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "ACK",
  "ACK",
  "ACK",
  "",
  sizeof(ACK),
  2,
  ack__field_descriptors,
  ack__field_indices_by_name,
  1,  ack__number_ranges,
  (ProtobufCMessageInit) ack__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor vehicle_door__field_descriptors[1] =
{
  {
    "door_state",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(VehicleDoor, door_state),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned vehicle_door__field_indices_by_name[] = {
  0,   /* field[0] = door_state */
};
static const ProtobufCIntRange vehicle_door__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor vehicle_door__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "VehicleDoor",
  "VehicleDoor",
  "VehicleDoor",
  "",
  sizeof(VehicleDoor),
  1,
  vehicle_door__field_descriptors,
  vehicle_door__field_indices_by_name,
  1,  vehicle_door__number_ranges,
  (ProtobufCMessageInit) vehicle_door__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor panoramic_sunroof__field_descriptors[1] =
{
  {
    "panoramic_sunroof_state",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(PanoramicSunroof, panoramic_sunroof_state),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned panoramic_sunroof__field_indices_by_name[] = {
  0,   /* field[0] = panoramic_sunroof_state */
};
static const ProtobufCIntRange panoramic_sunroof__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor panoramic_sunroof__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "PanoramicSunroof",
  "PanoramicSunroof",
  "PanoramicSunroof",
  "",
  sizeof(PanoramicSunroof),
  1,
  panoramic_sunroof__field_descriptors,
  panoramic_sunroof__field_indices_by_name,
  1,  panoramic_sunroof__number_ranges,
  (ProtobufCMessageInit) panoramic_sunroof__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor electric_door__field_descriptors[1] =
{
  {
    "electric_door_state",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(ElectricDoor, electric_door_state),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned electric_door__field_indices_by_name[] = {
  0,   /* field[0] = electric_door_state */
};
static const ProtobufCIntRange electric_door__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor electric_door__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "ElectricDoor",
  "ElectricDoor",
  "ElectricDoor",
  "",
  sizeof(ElectricDoor),
  1,
  electric_door__field_descriptors,
  electric_door__field_indices_by_name,
  1,  electric_door__number_ranges,
  (ProtobufCMessageInit) electric_door__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor remote_fine_car__field_descriptors[1] =
{
  {
    "fine_car_state",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(RemoteFineCar, fine_car_state),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned remote_fine_car__field_indices_by_name[] = {
  0,   /* field[0] = fine_car_state */
};
static const ProtobufCIntRange remote_fine_car__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor remote_fine_car__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "RemoteFineCar",
  "RemoteFineCar",
  "RemoteFineCar",
  "",
  sizeof(RemoteFineCar),
  1,
  remote_fine_car__field_descriptors,
  remote_fine_car__field_indices_by_name,
  1,  remote_fine_car__number_ranges,
  (ProtobufCMessageInit) remote_fine_car__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor charge__field_descriptors[1] =
{
  {
    "charge_state",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(Charge, charge_state),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned charge__field_indices_by_name[] = {
  0,   /* field[0] = charge_state */
};
static const ProtobufCIntRange charge__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor charge__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "Charge",
  "Charge",
  "Charge",
  "",
  sizeof(Charge),
  1,
  charge__field_descriptors,
  charge__field_indices_by_name,
  1,  charge__number_ranges,
  (ProtobufCMessageInit) charge__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor power_control__field_descriptors[1] =
{
  {
    "power_state",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(PowerControl, power_state),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned power_control__field_indices_by_name[] = {
  0,   /* field[0] = power_state */
};
static const ProtobufCIntRange power_control__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor power_control__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "PowerControl",
  "PowerControl",
  "PowerControl",
  "",
  sizeof(PowerControl),
  1,
  power_control__field_descriptors,
  power_control__field_indices_by_name,
  1,  power_control__number_ranges,
  (ProtobufCMessageInit) power_control__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCEnumValue application_header__message_type__enum_values_by_number[9] =
{
  { "ACK", "APPLICATION_HEADER__MESSAGE_TYPE__ACK", 0 },
  { "VEHICLE_SECURITY_FUNC", "APPLICATION_HEADER__MESSAGE_TYPE__VEHICLE_SECURITY_FUNC", 1 },
  { "SECURITY_FUNC_RESPONSE", "APPLICATION_HEADER__MESSAGE_TYPE__SECURITY_FUNC_RESPONSE", 2 },
  { "VEHICLE_DOOR", "APPLICATION_HEADER__MESSAGE_TYPE__VEHICLE_DOOR", 3 },
  { "PANORAMIC_SUNROOF", "APPLICATION_HEADER__MESSAGE_TYPE__PANORAMIC_SUNROOF", 4 },
  { "ELECTRIC_DOOR", "APPLICATION_HEADER__MESSAGE_TYPE__ELECTRIC_DOOR", 5 },
  { "REMOTE_FINE_CAR", "APPLICATION_HEADER__MESSAGE_TYPE__REMOTE_FINE_CAR", 6 },
  { "CHARGE", "APPLICATION_HEADER__MESSAGE_TYPE__CHARGE", 7 },
  { "POWER_CONTRO", "APPLICATION_HEADER__MESSAGE_TYPE__POWER_CONTRO", 8 },
};
static const ProtobufCIntRange application_header__message_type__value_ranges[] = {
{0, 0},{0, 9}
};
static const ProtobufCEnumValueIndex application_header__message_type__enum_values_by_name[9] =
{
  { "ACK", 0 },
  { "CHARGE", 7 },
  { "ELECTRIC_DOOR", 5 },
  { "PANORAMIC_SUNROOF", 4 },
  { "POWER_CONTRO", 8 },
  { "REMOTE_FINE_CAR", 6 },
  { "SECURITY_FUNC_RESPONSE", 2 },
  { "VEHICLE_DOOR", 3 },
  { "VEHICLE_SECURITY_FUNC", 1 },
};
const ProtobufCEnumDescriptor application_header__message_type__descriptor =
{
  PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
  "ApplicationHeader.MessageType",
  "MessageType",
  "ApplicationHeader__MessageType",
  "",
  9,
  application_header__message_type__enum_values_by_number,
  9,
  application_header__message_type__enum_values_by_name,
  1,
  application_header__message_type__value_ranges,
  NULL,NULL,NULL,NULL   /* reserved[1234] */
};
static const ProtobufCFieldDescriptor application_header__field_descriptors[2] =
{
  {
    "protocol_version",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(ApplicationHeader, protocol_version),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "msg_type",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_ENUM,
    0,   /* quantifier_offset */
    offsetof(ApplicationHeader, msg_type),
    &application_header__message_type__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned application_header__field_indices_by_name[] = {
  1,   /* field[1] = msg_type */
  0,   /* field[0] = protocol_version */
};
static const ProtobufCIntRange application_header__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor application_header__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "ApplicationHeader",
  "ApplicationHeader",
  "ApplicationHeader",
  "",
  sizeof(ApplicationHeader),
  2,
  application_header__field_descriptors,
  application_header__field_indices_by_name,
  1,  application_header__number_ranges,
  (ProtobufCMessageInit) application_header__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor protocol_header__field_descriptors[4] =
{
  {
    "Head",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(ProtocolHeader, head),
    &application_header__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "Timestamp",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(ProtocolHeader, timestamp),
    &time_stamp__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "MsgCarrierLen",
    3,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(ProtocolHeader, msgcarrierlen),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "MsgCarrier",
    4,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_BYTES,
    0,   /* quantifier_offset */
    offsetof(ProtocolHeader, msgcarrier),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned protocol_header__field_indices_by_name[] = {
  0,   /* field[0] = Head */
  3,   /* field[3] = MsgCarrier */
  2,   /* field[2] = MsgCarrierLen */
  1,   /* field[1] = Timestamp */
};
static const ProtobufCIntRange protocol_header__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor protocol_header__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "ProtocolHeader",
  "ProtocolHeader",
  "ProtocolHeader",
  "",
  sizeof(ProtocolHeader),
  4,
  protocol_header__field_descriptors,
  protocol_header__field_indices_by_name,
  1,  protocol_header__number_ranges,
  (ProtobufCMessageInit) protocol_header__init,
  NULL,NULL,NULL    /* reserved[123] */
};
